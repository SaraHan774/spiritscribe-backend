#!/bin/bash

# Agent 1: Core Infrastructure Agent ÏûëÏóÖ Ïä§ÌÅ¨Î¶ΩÌä∏
echo "ü§ñ Agent 1: Core Infrastructure Agent ÏãúÏûë"
echo "=================================================="

# ÏÉâÏÉÅ Ï†ïÏùò
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨
PROJECT_ROOT="/Users/gahee/spiritscribe-backend"
AGENT_DIR="$PROJECT_ROOT/agent1-core"

# Agent 1 Ï†ÑÏö© ÏÑ§Ï†ï
AGENT_CONFIG='{
  "agent": {
    "name": "Core Infrastructure Agent",
    "role": "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§, Ïù∏Ï¶ù, ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨, Î≥¥Ïïà",
    "workspace": "agent1-core/",
    "dependencies": [],
    "outputs": ["ÏÇ¨Ïö©Ïûê ÎèÑÎ©îÏù∏", "Ïù∏Ï¶ù ÏãúÏä§ÌÖú", "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà"]
  },
  "tasks": [
    "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏÑ§Í≥Ñ Î∞è Íµ¨ÌòÑ",
    "JWT Ïù∏Ï¶ù ÏãúÏä§ÌÖú Íµ¨ÌòÑ", 
    "ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ API Íµ¨ÌòÑ",
    "Î≥¥Ïïà Î∞è Rate Limiting Íµ¨ÌòÑ"
  ],
  "collaboration": {
    "notify": ["agent2", "agent3"],
    "wait_for": [],
    "deliverables": ["ÏÇ¨Ïö©Ïûê ÎèÑÎ©îÏù∏ ÏôÑÏÑ±", "Ïù∏Ï¶ù ÏãúÏä§ÌÖú ÏôÑÏÑ±"]
  }
}'

# ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§Î°ú Ïù¥Îèô
cd "$AGENT_DIR"

echo -e "${BLUE}üìÅ ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨: $AGENT_DIR${NC}"

# Agent 1 ÏûëÏóÖ ÏãúÏûë
echo -e "${YELLOW}üöÄ Agent 1 ÏûëÏóÖ ÏãúÏûë...${NC}"

# 1. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏûëÏóÖ
echo -e "${BLUE}üìä 1. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏûëÏóÖ${NC}"
mkdir -p database/migrations
mkdir -p database/schemas

# ÏÇ¨Ïö©Ïûê Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉùÏÑ±
cat > database/migrations/V2__add_user_tables.sql << 'EOF'
-- ÏÇ¨Ïö©Ïûê Í¥ÄÎ†® ÌÖåÏù¥Î∏î Ï∂îÍ∞Ä
-- Agent 1: Core Infrastructure Agent ÏûëÏóÖ

-- ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS user_stats (
    user_id VARCHAR(36) PRIMARY KEY,
    check_ins_count INT DEFAULT 0,
    followers_count INT DEFAULT 0,
    following_count INT DEFAULT 0,
    reviews_count INT DEFAULT 0,
    favorites_count INT DEFAULT 0,
    total_ratings_count INT DEFAULT 0,
    average_rating DECIMAL(3,2) DEFAULT 0.00,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_stats_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- ÌåîÎ°úÏö∞ Í¥ÄÍ≥Ñ ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS follows (
    id VARCHAR(36) PRIMARY KEY,
    follower_id VARCHAR(36) NOT NULL,
    following_id VARCHAR(36) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_follow UNIQUE (follower_id, following_id),
    CONSTRAINT fk_follows_follower FOREIGN KEY (follower_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_follows_following FOREIGN KEY (following_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Ï∞®Îã® Í¥ÄÍ≥Ñ ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS blocks (
    id VARCHAR(36) PRIMARY KEY,
    blocker_id VARCHAR(36) NOT NULL,
    blocked_id VARCHAR(36) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_block UNIQUE (blocker_id, blocked_id),
    CONSTRAINT fk_blocks_blocker FOREIGN KEY (blocker_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_blocks_blocked FOREIGN KEY (blocked_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Ïù∏Îç±Ïä§ ÏÉùÏÑ±
CREATE INDEX IF NOT EXISTS idx_follows_follower ON follows(follower_id);
CREATE INDEX IF NOT EXISTS idx_follows_following ON follows(following_id);
CREATE INDEX IF NOT EXISTS idx_follows_created_at ON follows(created_at);
CREATE INDEX IF NOT EXISTS idx_blocks_blocker ON blocks(blocker_id);
CREATE INDEX IF NOT EXISTS idx_blocks_blocked ON blocks(blocked_id);
EOF

# 2. JWT Ïù∏Ï¶ù ÏãúÏä§ÌÖú Íµ¨ÌòÑ
echo -e "${BLUE}üîê 2. JWT Ïù∏Ï¶ù ÏãúÏä§ÌÖú Íµ¨ÌòÑ${NC}"
mkdir -p auth/jwt
mkdir -p auth/security

# JWT ÌÜ†ÌÅ∞ ÌîÑÎ°úÎ∞îÏù¥Îçî
cat > auth/jwt/JwtTokenProvider.kt << 'EOF'
package com.spiritscribe.auth.jwt

import io.jsonwebtoken.*
import io.jsonwebtoken.security.Keys
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import java.security.Key
import java.util.*

@Component
class JwtTokenProvider(
    @Value("\${security.jwt.secret}") private val secret: String,
    @Value("\${security.jwt.access-token-ttl-seconds}") private val accessTokenTtl: Long
) {
    
    private val key: Key = Keys.hmacShaKeyFor(secret.toByteArray())
    
    // JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ±
    fun generateToken(userId: String, username: String): String {
        val now = Date()
        val expiryDate = Date(now.time + accessTokenTtl * 1000)
        
        return Jwts.builder()
            .setSubject(userId)
            .claim("username", username)
            .setIssuedAt(now)
            .setExpiration(expiryDate)
            .signWith(key, SignatureAlgorithm.HS512)
            .compact()
    }
    
    // JWT ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù
    fun validateToken(token: String): Boolean {
        return try {
            Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
            true
        } catch (e: JwtException) {
            false
        }
    }
    
    // JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê ID Ï∂îÏ∂ú
    fun getUserIdFromToken(token: String): String {
        val claims = Jwts.parserBuilder()
            .setSigningKey(key)
            .build()
            .parseClaimsJws(token)
            .body
        
        return claims.subject
    }
    
    // JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ™Ö Ï∂îÏ∂ú
    fun getUsernameFromToken(token: String): String {
        val claims = Jwts.parserBuilder()
            .setSigningKey(key)
            .build()
            .parseClaimsJws(token)
            .body
        
        return claims["username"] as String
    }
}
EOF

# 3. ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ API Íµ¨ÌòÑ
echo -e "${BLUE}üë§ 3. ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ API Íµ¨ÌòÑ${NC}"
mkdir -p user/api
mkdir -p user/service
mkdir -p user/repository

# ÏÇ¨Ïö©Ïûê ÏÑúÎπÑÏä§ ÌôïÏû•
cat > user/service/UserService.kt << 'EOF'
package com.spiritscribe.user.service

import com.spiritscribe.user.domain.User
import com.spiritscribe.user.repository.UserRepository
import com.spiritscribe.user.api.UserProfileResponse
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class UserService(
    private val userRepository: UserRepository,
) {
    
    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
    fun findUserProfileById(userId: String): UserProfileResponse? {
        val user = userRepository.findById(userId).orElse(null) ?: return null
        return UserProfileResponse(
            id = user.id,
            username = user.username,
            displayName = user.displayName,
            profileImageUrl = user.profileImageUrl,
            bio = user.bio,
            isVerified = user.isVerified,
            isPrivate = user.isPrivate,
            location = user.location,
            website = user.website,
            createdAt = user.createdAt
        )
    }
    
    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏
    fun updateUserProfile(userId: String, updateRequest: UserProfileUpdateRequest): UserProfileResponse? {
        val user = userRepository.findById(userId).orElse(null) ?: return null
        
        val updatedUser = user.copy(
            displayName = updateRequest.displayName ?: user.displayName,
            bio = updateRequest.bio ?: user.bio,
            location = updateRequest.location ?: user.location,
            website = updateRequest.website ?: user.website,
            isPrivate = updateRequest.isPrivate ?: user.isPrivate
        )
        
        val savedUser = userRepository.save(updatedUser)
        return findUserProfileById(savedUser.id)
    }
    
    // ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ
    fun searchUsers(query: String, limit: Int = 20): List<UserProfileResponse> {
        return userRepository.findByUsernameContainingIgnoreCaseOrDisplayNameContainingIgnoreCase(query, query)
            .take(limit)
            .map { user ->
                UserProfileResponse(
                    id = user.id,
                    username = user.username,
                    displayName = user.displayName,
                    profileImageUrl = user.profileImageUrl,
                    bio = user.bio,
                    isVerified = user.isVerified,
                    isPrivate = user.isPrivate,
                    location = user.location,
                    website = user.website,
                    createdAt = user.createdAt
                )
            }
    }
}

data class UserProfileUpdateRequest(
    val displayName: String? = null,
    val bio: String? = null,
    val location: String? = null,
    val website: String? = null,
    val isPrivate: Boolean? = null
)
EOF

# 4. Î≥¥Ïïà Î∞è Rate Limiting Íµ¨ÌòÑ
echo -e "${BLUE}üõ°Ô∏è 4. Î≥¥Ïïà Î∞è Rate Limiting Íµ¨ÌòÑ${NC}"
mkdir -p security/ratelimit

# Rate Limiting ÏÑúÎπÑÏä§
cat > security/ratelimit/RateLimitService.kt << 'EOF'
package com.spiritscribe.security.ratelimit

import org.springframework.data.redis.core.RedisTemplate
import org.springframework.stereotype.Service
import java.time.Duration
import java.time.Instant

@Service
class RateLimitService(
    private val redisTemplate: RedisTemplate<String, String>
) {
    
    // Rate Limiting Ï≤¥ÌÅ¨
    fun isAllowed(key: String, limit: Int, windowSeconds: Long): Boolean {
        val now = Instant.now()
        val windowStart = now.minusSeconds(windowSeconds)
        
        val count = redisTemplate.opsForZSet()
            .count(key, windowStart.epochSecond.toDouble(), now.epochSecond.toDouble())
        
        return count < limit
    }
    
    // Rate Limiting Í∏∞Î°ù
    fun recordRequest(key: String, windowSeconds: Long) {
        val now = Instant.now()
        val score = now.epochSecond.toDouble()
        
        redisTemplate.opsForZSet().add(key, now.toString(), score)
        redisTemplate.expire(key, Duration.ofSeconds(windowSeconds))
    }
    
    // Rate Limiting ÌÇ§ ÏÉùÏÑ±
    fun generateKey(prefix: String, identifier: String): String {
        return "$prefix:$identifier"
    }
}
EOF

echo -e "${GREEN}‚úÖ Agent 1 ÏûëÏóÖ ÏôÑÎ£å${NC}"
echo -e "${YELLOW}üìã ÏôÑÏÑ±Îêú ÏûëÏóÖ:${NC}"
echo "  - Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà (ÏÇ¨Ïö©Ïûê, ÌåîÎ°úÏö∞, Ï∞®Îã® ÌÖåÏù¥Î∏î)"
echo "  - JWT Ïù∏Ï¶ù ÏãúÏä§ÌÖú"
echo "  - ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ API"
echo "  - Î≥¥Ïïà Î∞è Rate Limiting"

echo -e "${BLUE}üîî Agent 2, Agent 3ÏóêÍ≤å ÏïåÎ¶º: ÏÇ¨Ïö©Ïûê ÎèÑÎ©îÏù∏ ÏôÑÏÑ±${NC}"
